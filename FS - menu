int menu(){
    //Fonction qui va gérer le menu
    Serial.begin(115200);
    if(!oled1.begin(SSD1306_SWITCHCAPVCC,0x3C)){
        Serial.print("SSD1306 allocation failed");
        for(;;);
    }
    oled1.clearDisplay();
    oled1.setFont(&Tahu_16pt7b);
    oled1.setTextSize(1);
    oled1.setTextColor(WHITE);
    oled1.setCursor(0,10);
    switch(cursorMenu){
      //Cela va juste servir à faire un effet esthétique, à montrer à l'utilisateur sur quelle valeur du menu il se trouve actuellement.
        case 1:
          while(digitalRead(button2) == LOW && digitalRead(button3) == LOW && digitalRead(button4) == LOW){
            oled1.print(messageDep);
            oled1.println();
            oled1.print(option1bis);
            oled1.println();
            oled1.print(option2);
            oled1.println();
            oled1.print(option3);
            oled1.println();
            oled1.print(option4);
            oled1.display();
            if(digitalRead(button2) == HIGH || digitalRead(button3) == HIGH || digitalRead(button4) == HIGH){
              break;
            }
          }
        case 2:
          while(digitalRead(button2) == LOW && digitalRead(button3) == LOW && digitalRead(button4) == LOW){
            oled1.print(messageDep);
            oled1.println();
            oled1.print(option1);
            oled1.println();
            oled1.print(option2bis);
            oled1.println();
            oled1.print(option3);
            oled1.println();
            oled1.print(option4);
            oled1.display();
            if(digitalRead(button2) == HIGH || digitalRead(button3) == HIGH || digitalRead(button4) == HIGH){
              break;
            }
          }
        case 3:
          while(digitalRead(button2) == LOW && digitalRead(button3) == LOW && digitalRead(button4) == LOW){
            oled1.print(messageDep);
            oled1.println();
            oled1.print(option1);
            oled1.println();
            oled1.print(option2);
            oled1.println();
            oled1.print(option3bis);
            oled1.println();
            oled1.print(option4);
            oled1.display();
            if(digitalRead(button2) == HIGH || digitalRead(button3) == HIGH || digitalRead(button4) == HIGH){
              break;
            }
          }
        case 4:
          while(digitalRead(button2) == LOW && digitalRead(button3) == LOW && digitalRead(button4) == LOW){
            oled1.print(messageDep);
            oled1.println();
            oled1.print(option1);
            oled1.println();
            oled1.print(option2);
            oled1.println();
            oled1.print(option3);
            oled1.println();
            oled1.print(option4bis);
            oled1.display();
            if(digitalRead(button2) == HIGH || digitalRead(button3) == HIGH || digitalRead(button4) == HIGH){
              break;
            }
          }
      }
    if(digitalRead(button2) == HIGH){
      cursorMenu += 1;
      if(cursorMenu == 5){
        cursorMenu = 1; //Indiquer sur quelle valeur du menu on se trouve.
      }
      delay(50); //debouncing
    }
    else if(digitalRead(button4) == HIGH){
      cursorMenu -= 1;
      if(cursorMenu == -1){
        cursorMenu = 4;
      }
      delay(50); //debouncing
    }
    else if(digitalRead(button4) == HIGH){
      if(cursorMenu == 1){
        //Régler l'heure de l'alarme
      }
      else if(cursorMenu == 2){
        //Reglage de l'heure du réveil
        //Interrmopre le comptage de l'heure pendant le changement de l'horaire manuellement
      }
      else if(cursorMenu == 3){
        //Consulter l'historique des temps de mise hors-tension du réveil
      }
      else if(cursorMenu == 4){
        //Sortir
      }
    }
}
