//Nécessaires de menu : 
#include <Arduino.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#define SCREEN_WIDTH 128 //Largeur
#define SCREEN_HEIGHT 64 //Hauteur
const uint8_t Tahu_16pt7bBitmaps[] PROGMEM = {
  0x00, 0x06, 0x1C, 0x30, 0xE1, 0xC3, 0x0E, 0x1C, 0x30, 0x61, 0x83, 0x02,
  0x00, 0x00, 0x60, 0xC1, 0x80, 0x96, 0xE5, 0x40, 0x09, 0x82, 0x30, 0x4E,
  0x3F, 0xEF, 0xF1, 0x4C, 0x1F, 0xE7, 0x20, 0x4C, 0x11, 0x02, 0x00, 0x00,
  0x00, 0x80, 0x08, 0x00, 0x80, 0xFC, 0x1F, 0xE3, 0x12, 0x39, 0x03, 0xF8,
  0x07, 0xE0, 0x2E, 0x02, 0x73, 0x23, 0x66, 0x36, 0x43, 0xC4, 0x7C, 0x47,
  0xE5, 0xE7, 0xFC, 0x3F, 0x80, 0xE0, 0x08, 0x00, 0x80, 0x08, 0x00, 0x60,
  0xBC, 0x6D, 0xF3, 0x6C, 0xF6, 0x19, 0x80, 0xE0, 0x30, 0x0C, 0x06, 0x01,
  0x80, 0x64, 0x33, 0xCD, 0xB2, 0x7C, 0x8E, 0x40, 0x00, 0x00, 0x78, 0x00,
  0x7F, 0x80, 0x3C, 0x60, 0x1C, 0x08, 0x06, 0x00, 0x03, 0x80, 0x00, 0xE0,
  0xF0, 0x30, 0x1C, 0x06, 0x01, 0x80, 0x60, 0x38, 0x0C, 0x07, 0x0F, 0x83,
  0xC0, 0x30, 0x06, 0x01, 0x80, 0x60, 0x38, 0x0C, 0x03, 0x00, 0xC0, 0x30,
  0x0C, 0x03, 0x00, 0xE0, 0x18, 0x00, 0x08, 0x46, 0x31, 0x8C, 0x63, 0x39,
  0xCE, 0x73, 0x98, 0xCE, 0x73, 0x9C, 0xC6, 0x31, 0x9C, 0xC6, 0x31, 0x00,
  0x01, 0x00, 0x78, 0x03, 0x80, 0x18, 0x01, 0x80, 0x18, 0x03, 0x80, 0x30,
  0x03, 0x00, 0x38, 0x03, 0xF0, 0x1E, 0x03, 0x80, 0x60, 0x06, 0x00, 0xE0,
  0x0C, 0x00, 0xC0, 0x0C, 0x00, 0xC0, 0x1C, 0x01, 0x80, 0x38, 0x07, 0x00,
  0x60, 0x00, 0x30, 0x34, 0x71, 0xE0, 0x40 };

const GFXglyph Tahu_16pt7bGlyphs[] PROGMEM = {
  {     0,   1,   1,   6,    0,    0 },   // 0x20 ' '
  {     1,   7,  18,   9,    0,  -18 },   // 0x21 '!'
  {    17,   5,   4,   8,    2,  -19 },   // 0x22 '"'
  {    20,  11,  11,  14,    2,   -9 },   // 0x23 '#'
  {    36,  12,  23,  13,    0,  -19 },   // 0x24 '$'
  {    71,  10,  17,  11,    0,  -15 },   // 0x25 '%'
  {    93,  18,  20,  19,    0,  -17 },   // 0x26 '&'
  {   138,   2,   4,   6,    2,  -19 },   // 0x27 '''
  {   139,  10,  27,   8,    0,  -22 },   // 0x28 '('
  {   173,  10,  27,  10,   -1,  -22 },   // 0x29 ')'
  {   207,   6,   5,  10,    2,  -22 },   // 0x2A '*'
  {   211,   9,   9,  13,    1,   -8 },   // 0x2B '+'
  {   222,   3,   5,   8,    3,   -2 },   // 0x2C ','
  {   224,   9,   2,  13,    1,   -5 },   // 0x2D '-'
  {  3053,  10,  11,  11,   -1,  -10 },   // 0x72 'r'
  {  3067,  11,  17,   9,   -2,  -11 },   // 0x73 's'
  {  3091,  17,  26,   8,   -3,  -21 },   // 0x74 't'
  {  3147,  15,  12,  12,   -1,  -10 },   // 0x75 'u'
  {  3170,  13,  11,  11,    0,  -10 },   // 0x76 'v'
  {  3188,  15,  11,  15,    1,  -10 },   // 0x77 'w'
  {  3209,  12,  12,   9,   -2,   -9 },   // 0x78 'x'
  {  3227,  18,  25,  11,   -5,   -8 },   // 0x79 'y'
  {  3284,  16,  25,  11,   -3,   -9 },   // 0x7A 'z'
  {  3334,  10,  25,   8,    0,  -20 },   // 0x7B '{'
  {  3366,   5,  28,  10,    2,  -23 },   // 0x7C '|'
  {  3384,  12,  25,  10,   -2,  -20 },   // 0x7D '}'
  {  3422,   9,   4,  11,    0,   -6 } }; // 0x7E '~'

const GFXfont Tahu_16pt7b PROGMEM = {
  (uint8_t  *)Tahu_16pt7bBitmaps,
  (GFXglyph *)Tahu_16pt7bGlyphs,
  0x20, 0x7E, 46 };

Adafruit_SSD1306 oled1(SCREEN_WIDTH,SCREEN_HEIGHT,&Wire, -1);
int cursorMenu = 1;
const int button2 = 4;
const int button3 = 5;
const int button4 = 6;
//Ce qui suit est purement pour l'ésthétisme (expliqué plus tard dans le programme)////////////////////
char messageDep[50] = {"Bonjour, que voulez-vous faire ? "};                                         //
char option1[50] = {"1 : Régler l'heure de l'alarme"};                                               //
char option1bis[75] = {"1 : >> Régler l'heure de l'alarme <<"};                                      //
char option2[50] = {"2 : Régler l'heure du réveil"};                                                 //
char option2bis[75] = {"2 : >> Régler l'heure du réveil <<"};                                        //
char option3[75] = {"3 : Consulter l'historique des temps de mise hors-tension du réveil"};          //
char option3bis[100] = {"3 : >> Consulter l'historique des temps de mise hors-tension du réveil <<"};//
char option4[50] = {"4 : Sortir"};                                                                   //
char option4bis[75] = {"4 : >> Sortir <<"};                                                          //
char option5[50] = {"5 : Effacer les temps de mise hors-tension"};                                   //
char option5bis[75] = {"5 : >> Effacer les temps de mise hors-tension <<"};                          //
///////////////////////////////////////////////////////////////////////////////////////////////////////



void menu(){
  //Fonction qui va gérer le menu
    //Cela va juste servir à faire un effet esthétique, à montrer à l'utilisateur sur quelle valeur du menu il se trouve actuellement.
  switch(cursorMenu){
    case 1:
    oled1.clearDisplay();
    oled1.println(messageDep);
    oled1.println(option1bis);
    oled1.println(option2);
    oled1.println(option3);
    oled1.println(option4);
    oled1.println(option5);
    oled1.display();
    if(digitalRead(button2) == HIGH){
      cursorMenu += 1;
      if(cursorMenu == 5){
        cursorMenu = 1; //Indiquer sur quelle valeur du menu on se trouve.
      }
      delay(50); //debouncing
    }
    else if(digitalRead(button4) == HIGH){
      cursorMenu -= 1;
      if(cursorMenu == 0){
      cursorMenu = 4;
    }
    delay(50); //debouncing
    }
    else if(digitalRead(button3) == HIGH){
      if(cursorMenu == 1){
      //Régler l'heure de l'alarme
      //regler_heure_reveil();
      }
    else if(cursorMenu == 2){
    //Reglage de l'heure du réveil
      //regler_heure_reveil();
    //Interrmopre le comptage de l'heure pendant le changement de l'horaire manuellement
    }
    else if(cursorMenu == 3){
      //consulter_temps();
    //Consulter l'historique des temps de mise hors-tension du réveil
    }
    else if(cursorMenu == 4){
    //Sortir
      exit(0);
    }
    }
    case 2:
    oled1.clearDisplay();
    oled1.println(messageDep);
    oled1.println(option1);
    oled1.println(option2bis);
    oled1.println(option3);
    oled1.println(option4);
    oled1.println(option5);
    oled1.display();
    if(digitalRead(button2) == HIGH){
      cursorMenu += 1;
      if(cursorMenu == 5){
        cursorMenu = 1; //Indiquer sur quelle valeur du menu on se trouve.
      }
      delay(50); //debouncing
    }
    else if(digitalRead(button4) == HIGH){
      cursorMenu -= 1;
      if(cursorMenu == 0){
      cursorMenu = 4;
    }
    delay(50); //debouncing
    }
    else if(digitalRead(button3) == HIGH){
      if(cursorMenu == 1){
      //Régler l'heure de l'alarme
      //regler_heure_reveil();
      }
    else if(cursorMenu == 2){
    //Reglage de l'heure du réveil
      //regler_heure_reveil();
    //Interrmopre le comptage de l'heure pendant le changement de l'horaire manuellement
    }
    else if(cursorMenu == 3){
      //consulter_temps();
    //Consulter l'historique des temps de mise hors-tension du réveil
    }
    else if(cursorMenu == 4){
    //Sortir
      exit(0);
    }
    }
    case 3:
    oled1.clearDisplay();
    oled1.println(messageDep);
    oled1.println(option1);
    oled1.println(option2);
    oled1.println(option3bis);
    oled1.println(option4);
    oled1.println(option5);
    oled1.display();
    if(digitalRead(button2) == HIGH){
      cursorMenu += 1;
      if(cursorMenu == 5){
        cursorMenu = 1; //Indiquer sur quelle valeur du menu on se trouve.
      }
      delay(50); //debouncing
    }
    else if(digitalRead(button4) == HIGH){
      cursorMenu -= 1;
      if(cursorMenu == 0){
      cursorMenu = 4;
    }
    delay(50); //debouncing
    }
    else if(digitalRead(button3) == HIGH){
      if(cursorMenu == 1){
      //Régler l'heure de l'alarme
      //regler_heure_reveil();
      }
    else if(cursorMenu == 2){
    //Reglage de l'heure du réveil
      //regler_heure_reveil();
    //Interrmopre le comptage de l'heure pendant le changement de l'horaire manuellement
    }
    else if(cursorMenu == 3){
      //consulter_temps();
    //Consulter l'historique des temps de mise hors-tension du réveil
    }
    else if(cursorMenu == 4){
    //Sortir
      exit(0);
    }
    }
    case 4:
    oled1.clearDisplay();
    oled1.println(messageDep);
    oled1.println(option1);
    oled1.println(option2);
    oled1.println(option3);
    oled1.println(option4bis);
    oled1.println(option5);
    oled1.display();
    if(digitalRead(button2) == HIGH){
      cursorMenu += 1;
      if(cursorMenu == 5){
        cursorMenu = 1; //Indiquer sur quelle valeur du menu on se trouve.
      }
      delay(50); //debouncing
    }
    else if(digitalRead(button4) == HIGH){
      cursorMenu -= 1;
      if(cursorMenu == 0){
      cursorMenu = 4;
    }
    delay(50); //debouncing
    }
    else if(digitalRead(button3) == HIGH){
      if(cursorMenu == 1){
      //Régler l'heure de l'alarme
      //regler_heure_reveil();
      }
    else if(cursorMenu == 2){
    //Reglage de l'heure du réveil
      //regler_heure_reveil();
    //Interrmopre le comptage de l'heure pendant le changement de l'horaire manuellement
    }
    else if(cursorMenu == 3){
      //consulter_temps();
    //Consulter l'historique des temps de mise hors-tension du réveil
    }
    else if(cursorMenu == 4){
    //Sortir
      exit(0);
    }
    }
    case 5:
    oled1.clearDisplay();
    oled1.println(messageDep);
    oled1.println(option1);
    oled1.println(option2);
    oled1.println(option3);
    oled1.println(option4);
    oled1.println(option5bis);
    oled1.display();
    if(digitalRead(button2) == HIGH){
      cursorMenu += 1;
      if(cursorMenu == 5){
        cursorMenu = 1; //Indiquer sur quelle valeur du menu on se trouve.
      }
      delay(50); //debouncing
    }
    else if(digitalRead(button4) == HIGH){
      cursorMenu -= 1;
      if(cursorMenu == 0){
      cursorMenu = 4;
    }
    delay(50); //debouncing
    }
    else if(digitalRead(button3) == HIGH){
      if(cursorMenu == 1){
      //Régler l'heure de l'alarme
      //regler_heure_reveil();
      }
    else if(cursorMenu == 2){
    //Reglage de l'heure du réveil
      //regler_heure_reveil();
    //Interrmopre le comptage de l'heure pendant le changement de l'horaire manuellement
    }
    else if(cursorMenu == 3){
      //consulter_temps();
    //Consulter l'historique des temps de mise hors-tension du réveil
    }
    else if(cursorMenu == 4){
    //Sortir
      exit(0);
    }
    }
    }      
  }
