
#include <Arduino.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <string.h>
#include <SPI.h>
#include <RTClib.h>
#include <stdio.h>
#include <time.h>
#include <ctype.h>


#define SCREEN_WIDTH 128 //Largeur
#define SCREEN_HEIGHT 64 //Hauteur

//POLICE DECRITURE POUR L'ECRAN OLED

const uint8_t Tahu_16pt7bBitmaps[] PROGMEM = {
  0x00, 0x06, 0x1C, 0x30, 0xE1, 0xC3, 0x0E, 0x1C, 0x30, 0x61, 0x83, 0x02,
  0x00, 0x00, 0x60, 0xC1, 0x80, 0x96, 0xE5, 0x40, 0x09, 0x82, 0x30, 0x4E,
  0x3F, 0xEF, 0xF1, 0x4C, 0x1F, 0xE7, 0x20, 0x4C, 0x11, 0x02, 0x00, 0x00,
  0x00, 0x80, 0x08, 0x00, 0x80, 0xFC, 0x1F, 0xE3, 0x12, 0x39, 0x03, 0xF8,
  0x07, 0xE0, 0x2E, 0x02, 0x73, 0x23, 0x66, 0x36, 0x43, 0xC4, 0x7C, 0x47,
  0xE5, 0xE7, 0xFC, 0x3F, 0x80, 0xE0, 0x08, 0x00, 0x80, 0x08, 0x00, 0x60,
  0xBC, 0x6D, 0xF3, 0x6C, 0xF6, 0x19, 0x80, 0xE0, 0x30, 0x0C, 0x06, 0x01,
  0x80, 0x64, 0x33, 0xCD, 0xB2, 0x7C, 0x8E, 0x40, 0x00, 0x00, 0x78, 0x00,
  0x7F, 0x80, 0x3C, 0x60, 0x1C, 0x08, 0x06, 0x00, 0x03, 0x80, 0x00, 0xE0,
  0xF0, 0x30, 0x1C, 0x06, 0x01, 0x80, 0x60, 0x38, 0x0C, 0x07, 0x0F, 0x83,
  0xC0, 0x30, 0x06, 0x01, 0x80, 0x60, 0x38, 0x0C, 0x03, 0x00, 0xC0, 0x30,
  0x0C, 0x03, 0x00, 0xE0, 0x18, 0x00, 0x08, 0x46, 0x31, 0x8C, 0x63, 0x39,
  0xCE, 0x73, 0x98, 0xCE, 0x73, 0x9C, 0xC6, 0x31, 0x9C, 0xC6, 0x31, 0x00,
  0x01, 0x00, 0x78, 0x03, 0x80, 0x18, 0x01, 0x80, 0x18, 0x03, 0x80, 0x30,
  0x03, 0x00, 0x38, 0x03, 0xF0, 0x1E, 0x03, 0x80, 0x60, 0x06, 0x00, 0xE0,
  0x0C, 0x00, 0xC0, 0x0C, 0x00, 0xC0, 0x1C, 0x01, 0x80, 0x38, 0x07, 0x00,
  0x60, 0x00, 0x30, 0x34, 0x71, 0xE0, 0x40 };

const GFXglyph Tahu_16pt7bGlyphs[] PROGMEM = {
  {     0,   1,   1,   6,    0,    0 },   // 0x20 ' '
  {     1,   7,  18,   9,    0,  -18 },   // 0x21 '!'
  {    17,   5,   4,   8,    2,  -19 },   // 0x22 '"'
  {    20,  11,  11,  14,    2,   -9 },   // 0x23 '#'
  {    36,  12,  23,  13,    0,  -19 },   // 0x24 '$'
  {    71,  10,  17,  11,    0,  -15 },   // 0x25 '%'
  {    93,  18,  20,  19,    0,  -17 },   // 0x26 '&'
  {   138,   2,   4,   6,    2,  -19 },   // 0x27 '''
  {   139,  10,  27,   8,    0,  -22 },   // 0x28 '('
  {   173,  10,  27,  10,   -1,  -22 },   // 0x29 ')'
  {   207,   6,   5,  10,    2,  -22 },   // 0x2A '*'
  {   211,   9,   9,  13,    1,   -8 },   // 0x2B '+'
  {   222,   3,   5,   8,    3,   -2 },   // 0x2C ','
  {   224,   9,   2,  13,    1,   -5 },   // 0x2D '-'
  {  3053,  10,  11,  11,   -1,  -10 },   // 0x72 'r'
  {  3067,  11,  17,   9,   -2,  -11 },   // 0x73 's'
  {  3091,  17,  26,   8,   -3,  -21 },   // 0x74 't'
  {  3147,  15,  12,  12,   -1,  -10 },   // 0x75 'u'
  {  3170,  13,  11,  11,    0,  -10 },   // 0x76 'v'
  {  3188,  15,  11,  15,    1,  -10 },   // 0x77 'w'
  {  3209,  12,  12,   9,   -2,   -9 },   // 0x78 'x'
  {  3227,  18,  25,  11,   -5,   -8 },   // 0x79 'y'
  {  3284,  16,  25,  11,   -3,   -9 },   // 0x7A 'z'
  {  3334,  10,  25,   8,    0,  -20 },   // 0x7B '{'
  {  3366,   5,  28,  10,    2,  -23 },   // 0x7C '|'
  {  3384,  12,  25,  10,   -2,  -20 },   // 0x7D '}'
  {  3422,   9,   4,  11,    0,   -6 } }; // 0x7E '~'

const GFXfont Tahu_16pt7b PROGMEM = {
  (uint8_t  *)Tahu_16pt7bBitmaps,
  (GFXglyph *)Tahu_16pt7bGlyphs,
  0x20, 0x7E, 46 };


//compter le temps : 
// -- > Fonction d'interruption
// -- > Menu (sous-programme) - Ecran OLED
// -- > Capteur sonore
// -- > LED
// -- > Afficher l'heure du réveil - Matrice de LEDs

Adafruit_SSD1306 oled1(SCREEN_WIDTH,SCREEN_HEIGHT,&Wire, -1);

const int LED = 2;
int valmenu = 0;
const int capteurultrasons = A1;
const int button2 = 4;
const int button3 = 5;
const int button4 = 6;
const int button5 = 7;
const int analogInPotentio = A0;
int sensorValue = 0;
int potentio = 0;
int cursorMenu = 1;
int cursorReglerRev = 1;
int reveil = 1;
int compteur2 = 0;
char buffer2[100];
int indicateur = 0;
////////COMPTEUR///////////
float currentTime = 0;  ///
float elapsedTime = 0;  ///
float previousTime = 0; ///
///////////////////////////

//Ce qui suit est purement pour l'ésthétisme (expliqué plus tard dans le programme)////////////////////
char messageDep[50] = {"Bonjour, que voulez-vous faire ? "};                                         //
char option1[50] = {"1 : Régler l'heure de l'alarme"};                                               //
char option1bis[75] = {"1 : >> Régler l'heure de l'alarme <<"};                                      //
char option2[50] = {"2 : Régler l'heure du réveil"};                                                 //
char option2bis[75] = {"2 : >> Régler l'heure du réveil <<"};                                        //
char option3[75] = {"3 : Consulter l'historique des temps de mise hors-tension du réveil"};          //
char option3bis[100] = {"3 : >> Consulter l'historique des temps de mise hors-tension du réveil <<"};//
char option4[50] = {"4 : Sortir"};                                                                   //
char option4bis[75] = {"4 : >> Sortir <<"};                                                          //
char reglerReveilMin[50] = {"Régler les minutes"};                                                   //
char reglerReveilMinbis[50] = {">> Régler les minutes <<"};                                          //
char reglerReveilH[50] = {"Régler les heures"};                                                      //
char reglerReveilHbis[50] = {">> Régler les heures <<"};                                             //
///////////////////////////////////////////////////////////////////////////////////////////////////////



///////////////////////////////////////////REPRENDRE ICI///////////////////////////////////////////////
void consulter_temps(){
  //Pour des soucis de lisibilité, on ne se souciera que des 5 derniers temps.
  FILE *fichierTemps = fopen("temps.txt","a+");  //Le mode d'écriture "a" conserve les anciennes données en mettant les nouvelles à la fin du fichier texte.
    if(fichierTemps == NULL){
        printf("Impossible d'ouvrir le fichier.");
    }
    while (fgets(buffer2, sizeof(buffer2), fichierTemps) != NULL) {
        //on incrémente le compteur pour chaque ligne prééxistante du fichier texte.
        compteur2++;
    }
    char tab5[50] = "Jour numéro : %d",compteur2;
    compteur2--;
    char tab4[50] = "Jour numéro : %d",compteur2;
    compteur2--;
    char tab3[50] = "Jour numéro : %d",compteur2;
    compteur2--;
    char tab2[50] = "Jour numéro : %d",compteur2;
    compteur2--;
    char tab1[50] = "Jour numéro : %d",compteur2;
    for(int i = 0; i < compteur2; i++){
        fgets(buffer2, sizeof(buffer2),fichierTemps);      
        for(int y = 0; y < sizeof(tab1); y++){
          indicateur = 0;
          if(tab1[y] != buffer2[y] || tab2[y] != buffer2[y] || tab3[y] != buffer2[y] || tab4[y] != buffer2[y] || tab5[y] != buffer2[y]){
            indicateur = 1;
          }
        }
      if(indicateur == 1){
        continue;
      }
      else {

      }
    }
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

void desactiver_reveil(){
  reveil = 0;
}

int menu(){
    //Fonction qui va gérer le menu
    Serial.begin(115200);
    if(!oled1.begin(SSD1306_SWITCHCAPVCC,0x3C)){
        Serial.print("SSD1306 allocation failed");
        for(;;);
    }
    oled1.clearDisplay();
    oled1.setFont(&Tahu_16pt7b);
    oled1.setTextSize(1);
    oled1.setTextColor(WHITE);
    oled1.setCursor(0,10);
    switch(cursorMenu){
      //Cela va juste servir à faire un effet esthétique, à montrer à l'utilisateur sur quelle valeur du menu il se trouve actuellement.
        case 1:
            oled1.print(messageDep);
            oled1.println();
            oled1.print(option1bis);
            oled1.println();
            oled1.print(option2);
            oled1.println();
            oled1.print(option3);
            oled1.println();
            oled1.print(option4);
            oled1.display();
            if(digitalRead(button2) == HIGH){
              cursorMenu += 1;
              if(cursorMenu == 5){
                cursorMenu = 1; //Indiquer sur quelle valeur du menu on se trouve.
              }
              delay(50); //debouncing
            }
            else if(digitalRead(button4) == HIGH){
              cursorMenu -= 1;
              if(cursorMenu == 0){
              cursorMenu = 4;
            }
            delay(50); //debouncing
            }
            else if(digitalRead(button3) == HIGH){
              if(cursorMenu == 1){
              //Régler l'heure de l'alarme
                return 2;
              }
            else if(cursorMenu == 2){
            //Reglage de l'heure du réveil
            //Interrmopre le comptage de l'heure pendant le changement de l'horaire manuellement
              return 3;
            }
            else if(cursorMenu == 3){
            //Consulter l'historique des temps de mise hors-tension du réveil
              return 4;
            }
            else if(cursorMenu == 4){
            //Sortir
              return;
            }
            }
        case 2:
            oled1.print(messageDep);
            oled1.println();
            oled1.print(option1);
            oled1.println();
            oled1.print(option2bis);
            oled1.println();
            oled1.print(option3);
            oled1.println();
            oled1.print(option4);
            oled1.display();
            if(digitalRead(button2) == HIGH){
              cursorMenu += 1;
              if(cursorMenu == 5){
                cursorMenu = 1; //Indiquer sur quelle valeur du menu on se trouve.
              }
              delay(50); //debouncing
            }
            else if(digitalRead(button4) == HIGH){
              cursorMenu -= 1;
              if(cursorMenu == 0){
              cursorMenu = 4;
            }
            delay(50); //debouncing
            }
            else if(digitalRead(button3) == HIGH){
              if(cursorMenu == 1){
              //Régler l'heure de l'alarme
                return 2;
              }
            else if(cursorMenu == 2){
            //Reglage de l'heure du réveil
            //Interrmopre le comptage de l'heure pendant le changement de l'horaire manuellement
              return 3;
            }
            else if(cursorMenu == 3){
            //Consulter l'historique des temps de mise hors-tension du réveil
              return 4;
            }
            else if(cursorMenu == 4){
            //Sortir
              return;
            }
            }
        case 3:
            oled1.print(messageDep);
            oled1.println();
            oled1.print(option1);
            oled1.println();
            oled1.print(option2);
            oled1.println();
            oled1.print(option3bis);
            oled1.println();
            oled1.print(option4);
            oled1.display();
            if(digitalRead(button2) == HIGH){
              cursorMenu += 1;
              if(cursorMenu == 5){
                cursorMenu = 1; //Indiquer sur quelle valeur du menu on se trouve.
              }
              delay(50); //debouncing
            }
            else if(digitalRead(button4) == HIGH){
              cursorMenu -= 1;
              if(cursorMenu == 0){
              cursorMenu = 4;
            }
            delay(50); //debouncing
            }
            else if(digitalRead(button3) == HIGH){
              if(cursorMenu == 1){
              //Régler l'heure de l'alarme
                return 2;
              }
            else if(cursorMenu == 2){
            //Reglage de l'heure du réveil
            //Interrmopre le comptage de l'heure pendant le changement de l'horaire manuellement
              return 3;
            }
            else if(cursorMenu == 3){
            //Consulter l'historique des temps de mise hors-tension du réveil
              return 4;
            }
            else if(cursorMenu == 4){
            //Sortir
              return;
            }
            }
        case 4:
            oled1.print(messageDep);
            oled1.println();
            oled1.print(option1);
            oled1.println();
            oled1.print(option2);
            oled1.println();
            oled1.print(option3);
            oled1.println();
            oled1.print(option4bis);
            oled1.display();
            if(digitalRead(button2) == HIGH){
              cursorMenu += 1;
              if(cursorMenu == 5){
                cursorMenu = 1; //Indiquer sur quelle valeur du menu on se trouve.
              }
              delay(50); //debouncing
            }
            else if(digitalRead(button4) == HIGH){
              cursorMenu -= 1;
              if(cursorMenu == 0){
              cursorMenu = 4;
            }
            delay(50); //debouncing
            }
            else if(digitalRead(button3) == HIGH){
              if(cursorMenu == 1){
              //Régler l'heure de l'alarme
                return 2;
              }
            else if(cursorMenu == 2){
            //Reglage de l'heure du réveil
            //Interrmopre le comptage de l'heure pendant le changement de l'horaire manuellement
              return 3;
            }
            else if(cursorMenu == 3){
            //Consulter l'historique des temps de mise hors-tension du réveil
              return 4;
            }
            else if(cursorMenu == 4){
            //Sortir
              return;
            }
            }
    }      
  }

void interrupt_to_compteur() {
    //Quand le réveil se met en marche on interromp tout le programme.
    if (reveil == 0) {
        return;
        //Le réveil est desactivé.
    }
    clock_t pauseStart = 0;
    // Départ du timer
    clock_t start = clock();
    int i = 0;
    int compteur = 0;  //compte le nombre de ligne du fichier texte.
    char buffer[100];  //chaîne de caractères contenant une ligne du fichier texte.
    while (elapsedTime < 10) {
        //timer.
        clock_t end = clock();
        double elapsed = (double) (end - start) / CLOCKS_PER_SEC;
        if (elapsed >= 1.0) {
            //ce qui compte.
            elapsedTime += (float) elapsed;
            start = clock(); // Réinitialisation du début pour le prochain tick
        }
    }
    FILE *fichierTemps = fopen("temps.txt","a+");  //Le mode d'écriture "a" conserve les anciennes données en mettant les nouvelles à la fin du fichier texte.
    if(fichierTemps == NULL){
        printf("Impossible d'ouvrir le fichier.");
    }
    while (fgets(buffer, sizeof(buffer), fichierTemps) != NULL) {
        //on incrémente le compteur pour chaque ligne prééxistante du fichier texte.
        compteur++;
    }

    // Incrémenter le compteur pour le jour actuel
    compteur++;

    // Écrire dans le fichier avec le format requis
    fprintf(fichierTemps, "Jour numéro %d : %.1f secondes.\n", compteur, elapsedTime);
    fclose(fichierTemps);
}

void regler_heure_reveil(){
  while(cursorMenu == 2){
    switch(cursorReglerRev){
      case 1:
      oled1.clearDisplay();
      oled1.println(reglerReveilMinbis);
      oled1.println(reglerReveilH);
      oled1.display();
      if(digitalRead(button3) == HIGH){
        //bouton de validation.
        oled1.clearDisplay();
        oled1.println("Actuellement en train de changer les minutes.");
        oled1.println("Appuyer sur un des deux boutons de navigation pour quitter.");
        oled1.display();
        if(digitalRead(button2) == HIGH || digitalRead(button4) == HIGH){
          break;
        }
        sensorValue = analogRead(analogInPotentio);
        potentio = map(sensorValue,0,1023,0,60);
        //donner ici aux minutes la valeur de l'angle du potentiomètre.
        break;
      }
      else if(digitalRead(button2) == HIGH){
        cursorReglerRev ++;
        if(cursorReglerRev == 3){
          cursorReglerRev = 1;
        }
        delay(50);
        break;
      }
      else if(digitalRead(button4) == HIGH){
        cursorReglerRev--;
        if(cursorReglerRev == 0){
          cursorReglerRev = 2;
        }
        delay(50);
        break;
      }
      break;
      case 2:
      oled1.clearDisplay();
      oled1.println(reglerReveilMin);
      oled1.println(reglerReveilHbis);
      oled1.display();
      if(digitalRead(button3) == HIGH){
        //bouton de validation.
        oled1.clearDisplay();
        oled1.println("Actuellement en train de changer les heures");
        oled1.println("Appuyer sur un des deux boutons de navigation pour quitter.");
        oled1.display();
        if(digitalRead(button2) == HIGH || digitalRead(button4) == HIGH){
          break;
        }
        sensorValue = analogRead(analogInPotentio);
        potentio = map(sensorValue,0,1023,0,24);
        //donner ici aux heures la valeur de l'angle du potentiomètre.
        break;
      }
      else if(digitalRead(button2) == HIGH){
        cursorReglerRev ++;
        if(cursorReglerRev == 3){
          cursorReglerRev = 1;
        }
        delay(50);
        break;
      }
      else if(digitalRead(button4) == HIGH){
        cursorReglerRev--;
        if(cursorReglerRev == 0){
          cursorReglerRev = 2;
        }
        delay(50);
        break;
      }
      break;
    }
    sensorValue = analogRead(analogInPotentio);
    potentio = map(sensorValue,0,1023,0,60);

  }
}

void setup(){
    pinMode(button2, INPUT);  //Séléction 1
    pinMode(button3, INPUT);  //Séléction 2
    pinMode(button4, INPUT);  //Séléction 3 (Activation/désactivation du réveil)
    pinMode(button5, INPUT);  //Séléction 4 (validation pour le menu);
    pinMode(analogInPotentio, INPUT);  //pour régler l'heure du réveil
    pinMode(capteurultrasons, INPUT);  //capter les bruits du réveil
    pinMode(LED, OUTPUT);  //LED qui s'allume quand le réveil sonne (vérifier le bon fonctionnement du programme)
    attachInterrupt(digitalPinToInterrupt(LED), interrupt_to_compteur, RISING);  //pensez à remplacer la condition d'interruption par un signal sonore et non un front montant de la LED.
    attachInterrupt(digitalPinToInterrupt(button5), desactiver_reveil, RISING);
    Serial.begin(9600);  //Pour les tests
}


void loop(){
  valmenu = menu();
}

