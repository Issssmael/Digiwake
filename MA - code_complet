#include <Arduino.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <string.h>
#include <SPI.h>
#include <stdio.h>
#include <time.h>
#include <ctype.h>
#include <Encoder.h>
#include <RTClib.h>
#include <LedControl.h>


#define SCREEN_WIDTH 128 //Largeur
#define SCREEN_HEIGHT 64 //Hauteur

// Broches de l'encodeur rotatif
#define encoderPinA 2
#define encoderPinB 3
#define buttonPin 4

//POLICE DECRITURE POUR L'ECRAN OLED

const uint8_t Tahu_16pt7bBitmaps[] PROGMEM = {
  0x00, 0x06, 0x1C, 0x30, 0xE1, 0xC3, 0x0E, 0x1C, 0x30, 0x61, 0x83, 0x02,
  0x00, 0x00, 0x60, 0xC1, 0x80, 0x96, 0xE5, 0x40, 0x09, 0x82, 0x30, 0x4E,
  0x3F, 0xEF, 0xF1, 0x4C, 0x1F, 0xE7, 0x20, 0x4C, 0x11, 0x02, 0x00, 0x00,
  0x00, 0x80, 0x08, 0x00, 0x80, 0xFC, 0x1F, 0xE3, 0x12, 0x39, 0x03, 0xF8,
  0x07, 0xE0, 0x2E, 0x02, 0x73, 0x23, 0x66, 0x36, 0x43, 0xC4, 0x7C, 0x47,
  0xE5, 0xE7, 0xFC, 0x3F, 0x80, 0xE0, 0x08, 0x00, 0x80, 0x08, 0x00, 0x60,
  0xBC, 0x6D, 0xF3, 0x6C, 0xF6, 0x19, 0x80, 0xE0, 0x30, 0x0C, 0x06, 0x01,
  0x80, 0x64, 0x33, 0xCD, 0xB2, 0x7C, 0x8E, 0x40, 0x00, 0x00, 0x78, 0x00,
  0x7F, 0x80, 0x3C, 0x60, 0x1C, 0x08, 0x06, 0x00, 0x03, 0x80, 0x00, 0xE0,
  0xF0, 0x30, 0x1C, 0x06, 0x01, 0x80, 0x60, 0x38, 0x0C, 0x07, 0x0F, 0x83,
  0xC0, 0x30, 0x06, 0x01, 0x80, 0x60, 0x38, 0x0C, 0x03, 0x00, 0xC0, 0x30,
  0x0C, 0x03, 0x00, 0xE0, 0x18, 0x00, 0x08, 0x46, 0x31, 0x8C, 0x63, 0x39,
  0xCE, 0x73, 0x98, 0xCE, 0x73, 0x9C, 0xC6, 0x31, 0x9C, 0xC6, 0x31, 0x00,
  0x01, 0x00, 0x78, 0x03, 0x80, 0x18, 0x01, 0x80, 0x18, 0x03, 0x80, 0x30,
  0x03, 0x00, 0x38, 0x03, 0xF0, 0x1E, 0x03, 0x80, 0x60, 0x06, 0x00, 0xE0,
  0x0C, 0x00, 0xC0, 0x0C, 0x00, 0xC0, 0x1C, 0x01, 0x80, 0x38, 0x07, 0x00,
  0x60, 0x00, 0x30, 0x34, 0x71, 0xE0, 0x40 };

const GFXglyph Tahu_16pt7bGlyphs[] PROGMEM = {
  {     0,   1,   1,   6,    0,    0 },   // 0x20 ' '
  {     1,   7,  18,   9,    0,  -18 },   // 0x21 '!'
  {    17,   5,   4,   8,    2,  -19 },   // 0x22 '"'
  {    20,  11,  11,  14,    2,   -9 },   // 0x23 '#'
  {    36,  12,  23,  13,    0,  -19 },   // 0x24 '$'
  {    71,  10,  17,  11,    0,  -15 },   // 0x25 '%'
  {    93,  18,  20,  19,    0,  -17 },   // 0x26 '&'
  {   138,   2,   4,   6,    2,  -19 },   // 0x27 '''
  {   139,  10,  27,   8,    0,  -22 },   // 0x28 '('
  {   173,  10,  27,  10,   -1,  -22 },   // 0x29 ')'
  {   207,   6,   5,  10,    2,  -22 },   // 0x2A '*'
  {   211,   9,   9,  13,    1,   -8 },   // 0x2B '+'
  {   222,   3,   5,   8,    3,   -2 },   // 0x2C ','
  {   224,   9,   2,  13,    1,   -5 },   // 0x2D '-'
  {  3053,  10,  11,  11,   -1,  -10 },   // 0x72 'r'
  {  3067,  11,  17,   9,   -2,  -11 },   // 0x73 's'
  {  3091,  17,  26,   8,   -3,  -21 },   // 0x74 't'
  {  3147,  15,  12,  12,   -1,  -10 },   // 0x75 'u'
  {  3170,  13,  11,  11,    0,  -10 },   // 0x76 'v'
  {  3188,  15,  11,  15,    1,  -10 },   // 0x77 'w'
  {  3209,  12,  12,   9,   -2,   -9 },   // 0x78 'x'
  {  3227,  18,  25,  11,   -5,   -8 },   // 0x79 'y'
  {  3284,  16,  25,  11,   -3,   -9 },   // 0x7A 'z'
  {  3334,  10,  25,   8,    0,  -20 },   // 0x7B '{'
  {  3366,   5,  28,  10,    2,  -23 },   // 0x7C '|'
  {  3384,  12,  25,  10,   -2,  -20 },   // 0x7D '}'
  {  3422,   9,   4,  11,    0,   -6 } }; // 0x7E '~'

const GFXfont Tahu_16pt7b PROGMEM = {
  (uint8_t  *)Tahu_16pt7bBitmaps,
  (GFXglyph *)Tahu_16pt7bGlyphs,
  0x20, 0x7E, 46 };

// Tableau pour les chiffres de 0 à 9
byte digits[10][8] = {
  { B00111100, B01000010, B01000010, B01000010, B01000010, B01000010, B01000010, B00111100 },  // 0
  { B00011000, B00001000, B00001000, B00001000, B00001000, B00001000, B00001000, B00011100 },  // 1
  { B00111100, B01000010, B00000010, B00011100, B00100000, B01000000, B01000010, B00111100 },  // 2
  { B00111100, B01000010, B00000010, B00011100, B00000010, B00000010, B01000010, B00111100 },  // 3
  { B00001000, B00011000, B00101000, B01001000, B01001000, B01111110, B00001000, B00001000 },  // 4
  { B00111100, B01000000, B01000000, B00111100, B00000010, B00000010, B01000010, B00111100 },  // 5
  { B00111100, B01000000, B01000000, B00111100, B01000010, B01000010, B01000010, B00111100 },  // 6
  { B00111110, B00000010, B00000100, B00001000, B00010000, B00010000, B00010000, B00010000 },  // 7
  { B00111100, B01000010, B01000010, B00111100, B01000010, B01000010, B01000010, B00111100 },  // 8
  { B00111100, B01000010, B01000010, B00111110, B00000010, B00000010, B01000010, B00111100 }   // 9
};


//compter le temps : 
// -- > Fonction d'interruption
// -- > Menu (sous-programme) - Ecran OLED
// -- > Capteur sonore
// -- > LED
// -- > Afficher l'heure du réveil - Matrice de LEDs

const int DIN_PIN = 12;
const int CLK_PIN = 11;
const int CS_PIN = 10;

Adafruit_SSD1306 oled1(SCREEN_WIDTH,SCREEN_HEIGHT,&Wire, -1);
Adafruit_SSD1306 oled2(SCREEN_WIDTH,SCREEN_HEIGHT,&Wire, -2);
Encoder myEncoder(encoderPinA, encoderPinB);
RTC_DS1307 rtc;
LedControl lc = LedControl(DIN_PIN, CLK_PIN, CS_PIN, 4);  // 4 blocs de 8x8 LED


const int LED = 2;
int valmenu = 0;
const int capteurultrasons = A1;
const int button1 = 3;
const int button2 = 4;
const int button3 = 5;
const int button4 = 6;
const int button5 = 7;
int cursorMenu = 1;
int cursorReglerRev = 1;
int reveil = 1;
int compteur2 = 0;
char buffer2[100];
int indicateur = 0;
int adresse_debut = 0; //Adresse pour fichier texte via mémoire EEPROM
int affichage = 1; //Si affichage vaut 1, c'est am/pm, si il vaut 2, c'est le format 24h.
volatile uint32_t compteur = 0; // Compteur en secondes

//Ce qui suit est purement pour l'ésthétisme (expliqué plus tard dans le programme)////////////////////
char messageDep[50] = {"Bonjour, que voulez-vous faire ? "};                                         //
char option1[50] = {"1 : Régler l'heure de l'alarme"};                                               //
char option1bis[75] = {"1 : >> Régler l'heure de l'alarme <<"};                                      //
char option2[50] = {"2 : Régler l'heure du réveil"};                                                 //
char option2bis[75] = {"2 : >> Régler l'heure du réveil <<"};                                        //
char option3[75] = {"3 : Consulter l'historique des temps de mise hors-tension du réveil"};          //
char option3bis[100] = {"3 : >> Consulter l'historique des temps de mise hors-tension du réveil <<"};//
char option4[50] = {"4 : Sortir"};                                                                   //
char option4bis[75] = {"4 : >> Sortir <<"};                                                          //
char option5[50] = {"5 : Effacer les temps de mise hors-tension"};                                   //
char option5bis[75] = {"5 : >> Effacer les temps de mise hors-tension <<"};                          //
///////////////////////////////////////////////////////////////////////////////////////////////////////

// put function declarations here:
void menu();
void consulter_temps();
void regler_heure_reveil();
void sortir();
void format_affichage();
void displayDigit(int block, int value);
void interrupt_to_compteur();
void desactiver_reveil();
void stopTimer();



void setup() {
  pinMode(button1, INPUT);
  pinMode(button2, INPUT);
  pinMode(button3, INPUT);
  pinMode(button4, INPUT);
  pinMode(button5, INPUT);
  Serial.begin(9600); 
  Serial.begin(115200);
  if (!rtc.begin()) {
    Serial.println("Couldn't find RTC");
    while (1);
  }

  if (!rtc.isrunning()) {
    Serial.println("RTC is NOT running!");
    rtc.adjust(DateTime(F(__DATE__), F(__TIME__)));
  }

  for (int i = 0; i < 4; i++) {
    lc.shutdown(i, false);
    lc.setIntensity(i, 5);
    lc.clearDisplay(i);
  }
  attachInterrupt(digitalPinToInterrupt(button5),desactiver_reveil,RISING);
  // put your setup code here, to run once:
}



void loop() {
  DateTime now = rtc.now();

  int hourTens = now.hour() / 10;
  int hourOnes = now.hour() % 10;
  int minutTens = now.minute() / 10;
  int minutOnes = now.minute() % 10;

  // Affichage de la dizaine d'heure sur le premier bloc
  displayDigit(3, hourTens);

  // Affichage de l'unité d'heure sur le deuxième bloc
  displayDigit(2, hourOnes);

  // Affichage de la dizaine de minutes sur le troisième bloc
  displayDigit(1, minutTens);

  // Affichage de l'unité de minutes sur le quatrième bloc
  displayDigit(0, minutOnes);


  // Affichage des points entre les heures et les minutes sur le deuxième bloc
  lc.setLed(2, 1, 7, true);
  lc.setLed(2, 6, 7, true);
  
  delay(1000);

  lc.setLed(2, 1, 7, false);
  lc.setLed(2, 6, 7, false);

  delay(1000);

  // put your main code here, to run repeatedly:
}



void menu(){
  //Fonction qui va gérer le menu
  if(!oled1.begin(SSD1306_SWITCHCAPVCC,0x3C)){
      Serial.print("SSD1306 allocation failed");
      for(;;);
  }
  oled1.clearDisplay();
  oled1.setFont(&Tahu_16pt7b);
  oled1.setTextSize(1);
  oled1.setTextColor(WHITE);
  oled1.setCursor(0,10);
  switch(cursorMenu){
    //Cela va juste servir à faire un effet esthétique, à montrer à l'utilisateur sur quelle valeur du menu il se trouve actuellement.
    case 1:
    oled1.clearDisplay();
    oled1.print(messageDep);
    oled1.println();
    oled1.print(option1bis);
    oled1.println();
    oled1.print(option2);
    oled1.println();
    oled1.print(option3);
    oled1.println();
    oled1.print(option4);
    oled1.println();
    oled1.print(option5);
    oled1.display();
    if(digitalRead(button2) == HIGH){
      cursorMenu += 1;
      if(cursorMenu == 5){
        cursorMenu = 1; //Indiquer sur quelle valeur du menu on se trouve.
      }
      delay(50); //debouncing
    }
    else if(digitalRead(button4) == HIGH){
      cursorMenu -= 1;
      if(cursorMenu == 0){
      cursorMenu = 4;
    }
    delay(50); //debouncing
    }
    else if(digitalRead(button3) == HIGH){
      if(cursorMenu == 1){
      //Régler l'heure de l'alarme
      //regler_heure_reveil();
      }
    else if(cursorMenu == 2){
    //Reglage de l'heure du réveil
      //regler_heure_reveil();
    //Interrmopre le comptage de l'heure pendant le changement de l'horaire manuellement
    }
    else if(cursorMenu == 3){
      //consulter_temps();
    //Consulter l'historique des temps de mise hors-tension du réveil
    }
    else if(cursorMenu == 4){
    //Sortir
      exit(0);
    }
    }
    case 2:
    oled1.clearDisplay();
    oled1.print(messageDep);
    oled1.println();
    oled1.print(option1);
    oled1.println();
    oled1.print(option2bis);
    oled1.println();
    oled1.print(option3);
    oled1.println();
    oled1.print(option4);
    oled1.println();
    oled1.print(option5);
    oled1.display();
    if(digitalRead(button2) == HIGH){
      cursorMenu += 1;
      if(cursorMenu == 5){
        cursorMenu = 1; //Indiquer sur quelle valeur du menu on se trouve.
      }
      delay(50); //debouncing
    }
    else if(digitalRead(button4) == HIGH){
      cursorMenu -= 1;
      if(cursorMenu == 0){
      cursorMenu = 4;
    }
    delay(50); //debouncing
    }
    else if(digitalRead(button3) == HIGH){
      if(cursorMenu == 1){
      //Régler l'heure de l'alarme
      //regler_heure_reveil();
      }
    else if(cursorMenu == 2){
    //Reglage de l'heure du réveil
      //regler_heure_reveil();
    //Interrmopre le comptage de l'heure pendant le changement de l'horaire manuellement
    }
    else if(cursorMenu == 3){
      //consulter_temps();
    //Consulter l'historique des temps de mise hors-tension du réveil
    }
    else if(cursorMenu == 4){
    //Sortir
      exit(0);
    }
    }
    case 3:
    oled1.clearDisplay();
    oled1.print(messageDep);
    oled1.println();
    oled1.print(option1);
    oled1.println();
    oled1.print(option2);
    oled1.println();
    oled1.print(option3bis);
    oled1.println();
    oled1.print(option4);
    oled1.println();
    oled1.print(option5);
    oled1.display();
    if(digitalRead(button2) == HIGH){
      cursorMenu += 1;
      if(cursorMenu == 5){
        cursorMenu = 1; //Indiquer sur quelle valeur du menu on se trouve.
      }
      delay(50); //debouncing
    }
    else if(digitalRead(button4) == HIGH){
      cursorMenu -= 1;
      if(cursorMenu == 0){
      cursorMenu = 4;
    }
    delay(50); //debouncing
    }
    else if(digitalRead(button3) == HIGH){
      if(cursorMenu == 1){
      //Régler l'heure de l'alarme
      //regler_heure_reveil();
      }
    else if(cursorMenu == 2){
    //Reglage de l'heure du réveil
      //regler_heure_reveil();
    //Interrmopre le comptage de l'heure pendant le changement de l'horaire manuellement
    }
    else if(cursorMenu == 3){
      //consulter_temps();
    //Consulter l'historique des temps de mise hors-tension du réveil
    }
    else if(cursorMenu == 4){
    //Sortir
      exit(0);
    }
    }
    case 4:
    oled1.clearDisplay();
    oled1.print(messageDep);
    oled1.println();
    oled1.print(option1);
    oled1.println();
    oled1.print(option2);
    oled1.println();
    oled1.print(option3);
    oled1.println();
    oled1.print(option4bis);
    oled1.println();
    oled1.print(option5);
    oled1.display();
    if(digitalRead(button2) == HIGH){
      cursorMenu += 1;
      if(cursorMenu == 5){
        cursorMenu = 1; //Indiquer sur quelle valeur du menu on se trouve.
      }
      delay(50); //debouncing
    }
    else if(digitalRead(button4) == HIGH){
      cursorMenu -= 1;
      if(cursorMenu == 0){
      cursorMenu = 4;
    }
    delay(50); //debouncing
    }
    else if(digitalRead(button3) == HIGH){
      if(cursorMenu == 1){
      //Régler l'heure de l'alarme
      //regler_heure_reveil();
      }
    else if(cursorMenu == 2){
    //Reglage de l'heure du réveil
      //regler_heure_reveil();
    //Interrmopre le comptage de l'heure pendant le changement de l'horaire manuellement
    }
    else if(cursorMenu == 3){
      //consulter_temps();
    //Consulter l'historique des temps de mise hors-tension du réveil
    }
    else if(cursorMenu == 4){
    //Sortir
      exit(0);
    }
    }
    case 5:
    oled1.clearDisplay();
    oled1.print(messageDep);
    oled1.println();
    oled1.print(option1);
    oled1.println();
    oled1.print(option2);
    oled1.println();
    oled1.print(option3);
    oled1.println();
    oled1.print(option4);
    oled1.println();
    oled1.print(option5bis);
    oled1.display();
    if(digitalRead(button2) == HIGH){
      cursorMenu += 1;
      if(cursorMenu == 5){
        cursorMenu = 1; //Indiquer sur quelle valeur du menu on se trouve.
      }
      delay(50); //debouncing
    }
    else if(digitalRead(button4) == HIGH){
      cursorMenu -= 1;
      if(cursorMenu == 0){
      cursorMenu = 4;
    }
    delay(50); //debouncing
    }
    else if(digitalRead(button3) == HIGH){
      if(cursorMenu == 1){
      //Régler l'heure de l'alarme
      //regler_heure_reveil();
      }
    else if(cursorMenu == 2){
    //Reglage de l'heure du réveil
      //regler_heure_reveil();
    //Interrmopre le comptage de l'heure pendant le changement de l'horaire manuellement
    }
    else if(cursorMenu == 3){
      //consulter_temps();
    //Consulter l'historique des temps de mise hors-tension du réveil
    }
    else if(cursorMenu == 4){
    //Sortir
      exit(0);
    }
    }
    }      
  }



void consulter_temps(){
    char buffer2[100];
    FILE *fichierTemps = fopen("temps.txt","r");
    if(fichierTemps == NULL){
        printf("Impossible d'ouvrir le fichier.");
    }
    while (fgets(buffer2, sizeof(buffer2), fichierTemps) != NULL) {
        //on incrémente le compteur pour chaque ligne prééxistante du fichier texte
        for(unsigned long i = 0; i < strlen(buffer2); i++){
          oled1.print(buffer2[i]);
        }
        oled1.println();
    }
    oled1.clearDisplay();
    oled1.display();
    fclose(fichierTemps);
}



void regler_heure_reveil(int minutes, int heures){
  //on utilisera cette fonction pour régler l'heure de l'alarme ainsi que l'heure du réveil
  //c'est pour cette raison que j'ai rajouté des paramètres, afin que cela se fasse plus facilement.
  while(cursorMenu == 2){
    static long oldPosition = -999;
    long newPosition = myEncoder.read();
  
    if (newPosition != oldPosition) {
      if (newPosition > oldPosition) {
        if (minutes < 59) {
          minutes++;
        } else {
          minutes = 0;
          if (heures < 23) {
            heures++;
          } else {
            heures = 0;
          }
        }
      } else {
        if (minutes > 0) {
          minutes--;
        } else {
          minutes = 59;
          if (heures > 0) {
            heures--;
          } else {
            heures = 23;
          }
        }
      }
      oldPosition = newPosition;
    }
    }
}



void sortir(){
  exit(0);
}



void format_affichage(){
  int cursor = 1;
  switch(cursor){
    case 1:
    oled1.clearDisplay();
    oled1.println("Quel format voulez-vous voir : ");
    oled1.println("1 - >> 12h am/pm << ");
    oled1.println("2 - 24h ");
    oled1.display();
    if(digitalRead(button3) == HIGH){
      affichage = 1;
      delay(50);
    }
    if(digitalRead(button2) == HIGH){
      cursor--;
      if(cursor == 0){
        cursor = 2;
      }
    }
    if(digitalRead(button4) == HIGH){
      cursor++;
      if(cursor == 3){
        cursor = 1;
      }
    }
    case 2:
    oled1.clearDisplay();
    oled1.println("Quel format voulez-vous voir : ");
    oled1.println("1 - 12h am/pm");
    oled1.println("2 - >> 24h << ");
    oled1.display();
    if(digitalRead(button3) == HIGH){
      affichage = 2;
      delay(50);
    }
    if(digitalRead(button2) == HIGH){
      cursor--;
      if(cursor == 0){
        cursor = 2;
      }
    }
    if(digitalRead(button4) == HIGH){
      cursor++;
      if(cursor == 3){
        cursor = 1;
      }
    }
  }
}



void displayDigit(int block, int value) {
  for (int i = 0; i < 8; i++) {
    lc.setRow(block, i, digits[value][i]);
  }
}



void interrupt_to_compteur(){
  if(reveil == 0){
    return;
  }
  int compteur3 = 0;  //compte le nombre de ligne du fichier texte.
  char buffer[100];  //chaîne de caractères contenant une ligne du fichier texte.
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  //ICI METTRE UNE CONDITION POUR QUE LE TIMER DEMARRE
  //EXEMPLE : LE CAPTEUR A ULTRASONS DETECTE UN SON.

  cli(); // Désactive les interruptions globalement
   // Configuration du Timer1 pour une interruption toutes les secondes
  TCCR1A = 0; // Configuration des registres de contrôle du Timer1
  TCCR1B = (1 << WGM12) | (1 << CS12) | (1 << CS10); // Mode CTC, prédivision de l'horloge par 1024
  OCR1A = 15624; // Valeur de comparaison pour obtenir une interruption toutes les secondes
  TIMSK1 |= (1 << OCIE1A); // Autorise l'interruption de comparaison du Timer1

  attachInterrupt(digitalPinToInterrupt(button1), stopTimer, FALLING);
  sei(); // Active les interruptions globalement

  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  FILE *fichierTemps = fopen("temps.txt","a+");  //Le mode d'écriture "a" conserve les anciennes données en mettant les nouvelles à la fin du fichier texte.
  if(fichierTemps == NULL){
      printf("Impossible d'ouvrir le fichier.");
  }
  while (fgets(buffer, sizeof(buffer), fichierTemps) != NULL) {
      //on incrémente le compteur pour chaque ligne prééxistante du fichier texte.
      compteur3++;
  }
  // Incrémenter le compteur pour le jour actuel
  compteur3++;
  // Écrire dans le fichier avec le format requis
  fprintf(fichierTemps, "Jour numéro %d : %lu secondes.\n", compteur3, compteur);
  fclose(fichierTemps);  
}



void desactiver_reveil(){
  reveil = !reveil;
}



void stopTimer() {
  TIMSK1 &= ~(1 << OCIE1A); // Désactive l'interruption de comparaison du Timer1
}



// Fonction d'interruption pour le Timer1 (appelée toutes les secondes)
ISR(TIMER1_COMPA_vect) {
  compteur++; // Incrémente le compteur à chaque interruption du Timer1
  // Vous pouvez effectuer d'autres actions à chaque seconde
}
